// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleProjectManager.Module.BusinessObjects;

#nullable disable

namespace SimpleProjectManager.Module.Migrations
{
    [DbContext(typeof(SimpleProjectManagerEFCoreDbContext))]
    [Migration("20230629164839_MyInitialMigrationName")]
    partial class MyInitialMigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomerTestimonial", b =>
                {
                    b.Property<Guid>("CustomersID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestimonialsID")
                        .HasColumnType("uuid");

                    b.HasKey("CustomersID", "TestimonialsID");

                    b.HasIndex("TestimonialsID");

                    b.ToTable("CustomerTestimonial");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.MediaDataObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MediaDataKey")
                        .HasColumnType("text");

                    b.Property<Guid?>("MediaResourceID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("MediaResourceID");

                    b.ToTable("MediaDataObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.MediaResourceObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("MediaData")
                        .HasColumnType("bytea");

                    b.HasKey("ID");

                    b.ToTable("MediaResourceObject");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<Guid?>("PhotoID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PhotoID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.Employee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.Project", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<Guid?>("ManagerID")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.ProjectTask", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedToID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<Guid?>("ProjectID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AssignedToID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.Testimonial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Highlight")
                        .HasColumnType("text");

                    b.Property<string>("Quote")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("CustomerTestimonial", b =>
                {
                    b.HasOne("SimpleProjectManager.Module.BusinessObjects.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleProjectManager.Module.BusinessObjects.Testimonial", null)
                        .WithMany()
                        .HasForeignKey("TestimonialsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.MediaDataObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.MediaResourceObject", "MediaResource")
                        .WithMany()
                        .HasForeignKey("MediaResourceID");

                    b.Navigation("MediaResource");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.Customer", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.MediaDataObject", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoID");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.Project", b =>
                {
                    b.HasOne("SimpleProjectManager.Module.BusinessObjects.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.ProjectTask", b =>
                {
                    b.HasOne("SimpleProjectManager.Module.BusinessObjects.Employee", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToID");

                    b.HasOne("SimpleProjectManager.Module.BusinessObjects.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectID");

                    b.Navigation("AssignedTo");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SimpleProjectManager.Module.BusinessObjects.Project", b =>
                {
                    b.Navigation("ProjectTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
